//
// Autogenerated by Thrift Compiler (0.14.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import Int64 = require('node-int64');


export declare class Message {
  success: boolean;
  message: string;

    constructor(args?: { success: boolean; message: string; });
}

export declare class Connection {
  name: string;
  type: string;
  config: { [k: string]: string; };

    constructor(args?: { name: string; type: string; config: { [k: string]: string; }; });
}

export declare class Action {
  name: string;
  code: string;

    constructor(args?: { name: string; code: string; });
}

export declare class Execute {
  action: string;
  request: Request;
  context: Context;

    constructor(args?: { action: string; request: Request; context: Context; });
}

export declare class Request {
  http: HttpRequest;
  rpc: RpcRequest;

    constructor(args?: { http?: HttpRequest; rpc?: RpcRequest; });
}

export declare class HttpRequest {
  method: string;
  headers: { [k: string]: string; };
  uriFragments: { [k: string]: string; };
  parameters: { [k: string]: string; };
  body: string;

    constructor(args?: { method: string; headers: { [k: string]: string; }; uriFragments: { [k: string]: string; }; parameters: { [k: string]: string; }; body: string; });
}

export declare class RpcRequest {
  arguments: string;

    constructor(args?: { arguments: string; });
}

export declare class Context {
  routeId: Int64;
  baseUrl: string;
  app: App;
  user: User;

    constructor(args?: { routeId: Int64; baseUrl: string; app: App; user: User; });
}

export declare class App {
  id: Int64;
  userId: Int64;
  status: number;
  name: string;
  url: string;
  appKey: string;
  scopes: string[];
  parameters: string[];

    constructor(args?: { id: Int64; userId: Int64; status: number; name: string; url: string; appKey: string; scopes: string[]; parameters: string[]; });
}

export declare class User {
  id: Int64;
  roleId: Int64;
  categoryId: Int64;
  status: number;
  name: string;
  email: string;
  points: number;

    constructor(args?: { id: Int64; roleId: Int64; categoryId: Int64; status: number; name: string; email: string; points: number; });
}

export declare class Result {
  response: Response;
  events: Event[];
  logs: Log[];

    constructor(args?: { response: Response; events: Event[]; logs: Log[]; });
}

export declare class Response {
  statusCode: number;
  headers: { [k: string]: string; };
  body: string;

    constructor(args?: { statusCode: number; headers: { [k: string]: string; }; body: string; });
}

export declare class Event {
  eventName: string;
  data: string;

    constructor(args?: { eventName: string; data: string; });
}

export declare class Log {
  level: string;
  message: string;

    constructor(args?: { level: string; message: string; });
}
